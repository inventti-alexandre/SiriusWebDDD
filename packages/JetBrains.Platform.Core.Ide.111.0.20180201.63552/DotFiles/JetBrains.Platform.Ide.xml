<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JetBrains.Platform.Ide</name>
    </assembly>
    <members>
        <member name="T:JetBrains.IDE.SolutionBuilders.BuildSession">
            <summary>
            The data object for the Solution Builder build session.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSession.BuildEventsNonProject">
            <summary>
            Build events for the session (errors, warnings, console output, and status messages from the engine) that do not fall into any of the projects.
            The success/failure state of the whole build session is derived from presense of any errors messages in these events and the events of all the projects.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSession.Target">
            <summary>
            How severe should the rebuild be.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSession.Projects">
            <summary>
            The list of projects known to this session, in various build states. Initially empty, filled with project when the build gets <see cref="F:JetBrains.IDE.SolutionBuilders.BuildSessionState.Running"/>.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSession.State">
            <summary>
            Build session state.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSession.#ctor(JetBrains.Util.FileSystemPath,JetBrains.ProjectModel.ISolution,JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.Util.FileSystemPath[],System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Ctor.
            </summary>
            <param name="solutionfile">URI of the solution file to be built.</param>
            <param name="severity">How severe should the build be.</param>
            <param name="pathProjectsMustBeBuilt">The projects that must be built (when we build up to them, we might stop). Empty to build the full set of projects.</param>
            <param name="sConfigurationName">Name of the solution configuration. Project configurations are taken from the configuration manager that maps solution-wide configs to per-project configs.</param>
            <param name="sPlatformName">Name of the solution platform. Project platforms are taken from the configuration manager that maps solution-wide platforms to per-project platforms.</param>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.BuildSession.IsSilent">
            <summary>
            Then session is silent, we don't show ui - progress in task, dashboard and build results.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.CreateBuildEventsAddRemove(JetBrains.IDE.SolutionBuilders.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            A composite signal that fires whenever a build event is added to session events or to any of the projects in the session.
            A new instance is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.CreateProjectErrorStatus(JetBrains.IDE.SolutionBuilders.BuildSessionProject,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.CreateProjectFullPathCache(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Creates a cache for getting the build setting project by its full path (cache throws if the element is missing).
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.CreateProjectFullPathCache2(JetBrains.IDE.SolutionBuilders.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a cache for getting the build setting project by its full path.
            The cache is live, ie when new projects are added to the session, they also get into the cache.
            Note: every time you call this method, a NEW cache is created, whose lifetime is as long as <paramref name="session"/>'s. Dispose of the cache to break the connection.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.CreateSessionErrorStatus(JetBrains.IDE.SolutionBuilders.BuildSession,JetBrains.DataFlow.Lifetime)">
            <summary>
            Creates a property that accumulates the project error status from the project's build events.
            A new property and new event watcher is created each time you call the method.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.GetAllBuildEvents(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Gets all of the build events for the current build session, which includes the project-related events for all of the projects and non-project build events.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.IsSuccessful(JetBrains.IDE.SolutionBuilders.BuildSessionProject)">
            <summary>
            Tells if the project had no compilation errors.
            Looks up its <see cref="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.BuildEvents"/> for those of the <see cref="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionEx.IsSuccessful(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Tells if the session had no compilation errors.
            Looks up its <see cref="F:JetBrains.IDE.SolutionBuilders.BuildSession.BuildEventsNonProject"/> and <see cref="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.BuildEvents"/> of all of the projects for those of the <see cref="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Error"/> kind.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.BuildSessionProject">
            <summary>
            Represents a single project in the build process.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.BuildEvents">
            <summary>
            Build events for the current project (errors, warnings, console output, and status messages from the engine).
            The success/failure state of the project is derived from presense of any errors messages in the events.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.BuildState">
            <summary>
            State of the project within the current build process.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.FullPath">
            <summary>
            <para>The identity of the project, usually, a path to the project file.</para>
            <para>You MUST NOT assume that this is the project file, or if it is a file at all.</para>
            <para>To transition between the <see cref="F:JetBrains.IDE.SolutionBuilders.BuildSessionProject.FullPath"/> and the corresponding <see cref="T:JetBrains.ProjectModel.IProject"/>, if any, use the <see cref="!:SolutionBuilder.GetProjectFullPath"/> and <see cref="M:JetBrains.ProjectModel.ProjectUtil.GetProjectByFullPath(JetBrains.ProjectModel.ISolution,JetBrains.Util.FileSystemPath)"/> functions.</para>
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.BuildSessionProject.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.BuildSessionProject.Name">
            <summary>
            Gets the short name of the project.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.BuildSessionProjectBuildState">
            <summary>
            Build state for a project in the build session.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectBuildState.Excluded">
            <summary>
            Will not be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectBuildState.Pending">
            <summary>
            Will be built in this session.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectBuildState.Running">
            <summary>
            Is currently being built.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectBuildState.Completed">
            <summary>
            Has been built (or skipped due to being up-to-date, see error status).
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.BuildSessionProjectErrorStatus">
            <summary>
            Whether the project has errors, warnings, etc, or not.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectErrorStatus.Clean">
            <summary>
            No errors, no warnings.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectErrorStatus.Warnings">
            <summary>
            The project has some warnings (but no errors).
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionProjectErrorStatus.Errors">
            <summary>
            The project has some errors (maybe also warnings).
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.BuildSessionState">
            <summary>
            Possible build session states.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionState.Waiting">
            <summary>
            The session has just been created and is waiting for someone to run its build (which is not guaranteed to happen).
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionState.Running">
            <summary>
            The build is currently running.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.BuildSessionState.Completed">
            <summary>
            The build has completed, either successfully or with errors.
            <see cref="T:JetBrains.IDE.SolutionBuilders.BuildSession"/> is <c>1</c>.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete">
            <summary>
            The base interface for manipulating a solution builder.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.BeginRun(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.GetProjectFullPath(JetBrains.ProjectModel.IProject)">
            <summary>
            Gets the SolBuilder-suitable full path identity of the project.
            Preferrably, the project file; otherwise, the project folder.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.InitImplementations(JetBrains.DataFlow.Lifetime)">
            <summary>
            List of impls => active.
            Active impls coming and going.
            </summary>
            <param name="lifetime"></param>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.BeginRun(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.EmptySolutionBuilder">
            <summary>
            A stub so that the <see cref="F:JetBrains.IDE.SolutionBuilders.CurrentSolutionBuilderObsolete.Implementations"/> always had at least one item to have its <see cref="!:CurrentSolutionBuilderObsolete.ActiveImplementation"/> non-<c>Null</c>.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.EmptySolutionBuilder.Abort">
            <summary>
            Aborts the <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/>, does nothing if not running.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.EmptySolutionBuilder.BeginRun(JetBrains.IDE.SolutionBuilders.BuildSession)">
            <summary>
            Begins running a build of the session (from <see cref="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])"/>), async.
            It's an error to invoke this method when <see cref="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderObsolete.RunningSession"/> is present.
            </summary>
            <param name="session">The session to run the build of. Must not be used yet.</param>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.EmptySolutionBuilder.CreateSession(JetBrains.IDE.SolutionBuilders.IBuildSessionTarget,JetBrains.ProjectModel.IProject[])">
            <summary>
            Creates a new build session.
            </summary>
            <param name="severity">How to build the projects.</param>
            <param name="projectsToBuild">The projects that must be included in the build (others might be included as needed), or an empty array to build the whole solution.</param>
            <returns>The new session on which the build could be started and the progress could be tracked.</returns>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.EmptySolutionBuilder.RunningSession">
            <summary>
            Gets the build session being currently run by the solution builder. <c>Null</c> if idle.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderRequest.Skipped">
            <summary>
            build wasn't started.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilderRequest.Progress">
            <summary>
            Between 0 and 1.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.Prototype.Services.Execution.IIncrementalRunnerProjectChecker.CanBuild(JetBrains.ProjectModel.IProject)">
            <summary>
            When returns false it means that whole solution should be built using 
            </summary>
            <param name="project"></param>
        </member>
        <member name="F:JetBrains.IDE.OpenFileOptions.DefaultActivate">
            <summary>
            Depending on option in Search and navigation options default may means
            either "normal tab" or "preview tab"
            </summary>
        </member>
        <member name="F:JetBrains.IDE.OpenFileOptions.DefaultNoActivate">
            <summary>
            Depending on option in Search and navigation options default may means
            either "normal tab" or "preview tab"
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.Activate">
            <summary>
            Whether open text control should be activated
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.TargetFrameworkId">
            <summary>
            TargetFrameworkId set for the file open. Null if unknown or don't care
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.TabOptions">
            <summary>
            In what type of tab the text control should be open
            </summary>
        </member>
        <member name="P:JetBrains.IDE.OpenFileOptions.FileView">
            <summary>
            What type of <see cref="P:JetBrains.IDE.OpenFileOptions.FileView"/> is to be used
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.Prototype.UseMsbuildSolutionBuilderFlag.No">
            <summary>
            Use Visual Studio build
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.Prototype.UseMsbuildSolutionBuilderFlag.NewVersion">
            <summary>
            Use Solution Builder
            </summary>
        </member>
        <member name="M:JetBrains.IDE.SolutionBuilders.ISolutionBuilder.IsDefault">
            <summary>
            Delegates to VS solution builder.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.ISolutionBuilder.IsIncremental">
            <summary>
            Has heuristics and tracks for project changes.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.Prototype.SolBuilderDuoSettings.UseMsbuildSolutionBuilder">
            <summary>
            Whether this implementation should be promoted into the solution builder service. NULL means asking user for consent.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.Prototype.SolBuilderDuoSettings.UseApiSurfaceHeuristics">
            <summary>
            Whether to use the <see cref="!:SolBuilderDuoHeuristics.ByApiSurface"/> mode instead of <see cref="!:SolBuilderDuoHeuristics.ByDate"/>.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.SolBuildEvent">
            <summary>
            A build event that occured while building of the project.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.SolBuildEventImportance">
            <summary>
            The importance of a build event. Originates from the MSBuild importance enum.
            Linear order: the lower the value, the more important is the event.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.SolBuildEventKind">
            <summary>
            Kinds of events logged when building projects or the session itself.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Output">
            <summary>
            Messages logged with MSBuild logger. These do not include console output (eg from external tools). Could be of various importance.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Service">
            <summary>
            Service messages from the engine: projects, targets, tasks. Usually have low importance.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Console">
            <summary>
            Raw console output (StdOut stream) of the MSBuild process. Any fatal failures with running the MSBuild process would also go here.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Warning">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.SolutionBuilders.SolBuildEventKind.Error">
            <summary>
            A warning logged with MSBuild logger. MSBuild tasks also would usually capture cmdline tool console output that qualifies against the warning pattern and report to the logger.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.SolutionBuilderRequest.Skipped">
            <inheritdoc />
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.SolutionBuilderRequest.Progress">
            <inheritdoc />
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.SolutionBuilderRequestAdvancedSettings">
            <summary>
            Only used in incremental builder now.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.SolutionBuilderRequestAdvancedSettings.MsbuildVersion">
            <summary>
            Version of MSBuild. If null version will be calculated from Solution Builder Settings.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.SolutionBuilderRequestAdvancedSettings.ParallelProcessesCount">
            <summary>
            0 - default value.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.SolutionBuilders.Prototype.Services.Execution.Stubs.SolutionSaverStub">
            <summary>
            Stub implementation. Should be implement in rider.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.SolutionBuilders.ViewModel.SolutionBuilderRequestViewModel.Progress">
            <summary>
            Between 0 and 1.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.FeatureSuggesterAttribute.ModeIndependent">
            <summary>
            Use this when feature suggestion serves also as an important notification, so that
            it should be displayed to user even if suggestions are turned off
            </summary>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.IFeatureSuggester.Suggestion">
            <summary>
            Current feature suggestion.
            </summary>
            <remarks>
            Feature suggester should set this property in order notify feature suggestion manager about new suggestion.
            Feature suggestion manager will handle new suggestion and will either show or cancel it.
            </remarks>
        </member>
        <member name="P:JetBrains.IDE.FeatureSuggestion.IFeatureSuggester.Aspects">
            <summary>
            Collection of aspects that allow to tweak feature suggester behavior.
            </summary>
            <remarks>
            For details <see cref="T:JetBrains.IDE.FeatureSuggestion.IFeatureSuggestion"/> implementations.
            </remarks>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.NotifyDisableMeAspect">
            <summary>
            Allows suggester to communicate that it is no longer needed and can be disabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.CustomSuggestionsIntervalAspect">
            <summary>
            Allows suggester to show notificatoins more or less often by overriding the time interval
            that is required to be passed since the previous suggestion.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.NoSuggestionsIntervalAspect">
            <summary>
            Allows suggester to show suggestion without requirements on time interval passed since the previous suggestion.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.SuggestionShowsLimitAspect">
            <summary>
            Allows suggester to set the limit on how many times it can show suggestions.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.DisableWhenSuggestionAcceptedAspect">
            <summary>
            Allows suggester to specify that after accepting its suggestion it should be disabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.DisableByActivityUsageAspect">
            <summary>
            Allows suggester to communicate that is should be disabled when certain usage statistics conditions are held.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.FeatureSuggestion.OverrideCurrentSuggestionAspect">
            <summary>
            Allows to cancel currently shown suggestion in order to show more prioritized one.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.TreeModelBrowserDescriptor.CreateViewAutomation(JetBrains.Application.UI.TreeModels.TreeModel)">
            <summary>
            Used only in devexpress TreeModelBrowserPanel
            </summary>   
        </member>
        <member name="M:JetBrains.IDE.TreeBrowser.UpdateEventArgs.#ctor(JetBrains.IDE.TreeBrowser.UpdateKind,System.Boolean,System.Collections.Generic.IEnumerable{JetBrains.Application.UI.TreeModels.TreeModelNode})">
            <summary>
            Constructor
            </summary>
            <param name="kind">Update kind</param>
            <param name="immediate">Should it be performed now or delayed</param>
            <param name="relatedNodes">Nodes to update or null to update all nodes</param>
        </member>
        <member name="T:JetBrains.IDE.UsageStatistics.ILicensedEntityUsageCheckerByProject">
            <summary>
            Implement the component to count usages of product specific to project type. 
            Make sure the component is marked with corresponding product zone so it is available if and only if the product is enabled.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.EditorManager">
            <summary>
            Default implementation that is not bound to any specific editor and is appropriate as test and stub implementation.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.AnonymousResultListHandler">
            <summary>
            Default implementation.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListIdeActions">
            <summary>
            Integration of the result list operations into the IDE. Reqiured to enable overriding in VS environment.
            Executes the given actions on the currently active result list handler.
            Base implementation works on our result list object only.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListManager">
            <summary>
              <para>Allows to publish your “result list” for IDE-global navigation with standard actions (in VS: “Edit.GoToNextLocation”, “Edit.GoToPrevLocation”).</para>
              <para>Do this when you open a tool window with a list which should be walked when user invokes those commands right from the editor.</para>
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListManager.CurrentResultListHandler">
            <summary>
            Gets the current result list handler.
            To set your own, you should generally use <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)"/>.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)">
            <summary>
            Makes this an active result list in the current IDE.
            </summary>
            <param name="def">Terminates when you request it or when your result list gets pushed out by smb else. Note that termination is NOT guarded here.</param>
            <param name="list"></param>
        </member>
        <member name="T:JetBrains.IDE.ResultList.ResultListValue">
            <summary>
            Implementation backend.
            Call <see cref="M:JetBrains.IDE.ResultList.ResultListManager.PublishResultList(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.ResultList.IResultListHandler)"/>.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.ResultListValue.CurrentResultListHandler">
            <summary>
            The currently active result list, if published.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToNextLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.Actions.ResultList_GoToPrevLocationAction">
            <summary>
            Base result list handling implementation which only relies on our Result List and does not integrate with an IDE.
            </summary>
        </member>
        <member name="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation">
            <summary>
              <para>Helps with publishing result lists from UI components.</para>
              <para>To be used in viewmodels. Bind to the view with a behavior for getting focus and keyboard events.</para>
            </summary>
            <remarks>
            Behavior:
            See <see cref="T:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState"/> for possible states of publishing the result list.
            Initially, when the control is created, we'd publish the result list and keep it even on focus loss.
            After that, we'd publish our result list on any focus entry, but it would be revoked automatically on focus loss if there were no explicit user actions on items (like using the result list next/prev actions, or executing a node with Enter). But if there were, it's the same way as on control creation once again, until smb else pushes us out.
            This behavior seems to be the most friendly in terms of the implicit modality.
            </remarks>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListByOwner">
            <summary>
            The original result list, as provided by the owner of this object. This is NOT submitted to the <see cref="T:JetBrains.IDE.ResultList.ResultListManager"/>.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ResultListWrapped">
            <summary>
            The wrapped result list created by this object which reports when an action is executed, so that to switch to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> when it happens.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ToString">
            <summary>
            String representation, for diagnostic needs.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin">
            <summary>
            For binding from UI. Tells when actual keyboard focus is within the control. Controls the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.ItemExecuted">
            <summary>
            For binding from viewmodel / UI.
            Fire this event when an item has been executed in the control. This means we should enter the <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> state.
            Unguarded, as this is for binding from UI.
            </summary>
        </member>
        <member name="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.State">
            <summary>
            The current state. Reflected into the global result list.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished">
            <summary>
            The result list is currently not published.
            Entry: (1) when someone else publishes a result list and pushes out our one, (2) when losing focus in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> state.
            Leave: on any entry event for other states.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished">
            <summary>
            The result list has been published for the time while we have keyboard focus.
            Entry: control got focus (<see cref="P:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.IsKeyboardFocusWithin"/> going high) while in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.NotPublished"/> state.
            Leave: (1) control lost focus, (2) switched to <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished"/> due to an explicit user action.
            </summary>
        </member>
        <member name="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.HardPublished">
            <summary>
            The result list has been explicitly published, and should persist even when focus goes to another control (e.g. to text control when navigating to the next location).
            Entry: (1) control with a result list initially created, (2) an explicit user action, like executing result list actions in <see cref="F:JetBrains.IDE.ResultList.UIResultListPublisherAutomation.PublishingState.FocusPublished"/> mode, or executing an item in the control with mouse or keyboard.
            Leave: someone has published another result list and pushed ours out.
            </summary>
        </member>
        <member name="M:JetBrains.IDE.PersistableViewManager.CreatePersistableView(JetBrains.DataFlow.LifetimeDefinition,JetBrains.Application.UI.PersistableDocument.PersistableDocument,JetBrains.Application.UI.UIAutomation.EitherControl,JetBrains.Application.Shortcuts.ShortcutManager.ShortcutScope)">
            <summary>
            Creates a new document tab and opens it with the given content.
            </summary>
            <param name="lifetimeDefinition">The limiting lifetime definition which will be terminated by the persistable view when its document tab is closed.</param>
            <param name="persistableDocument">Descriptor of the document in this document tab.</param>
            <param name="contentControl">Document tab content.</param>
            <param name="shortcutScope">Global or TextEditor shortcut scope.</param>
            <returns></returns>
        </member>
        <member name="T:JetBrains.IDE.UI.Options.OptionsPageViewFactorySolution">
            <summary>
            Enables <see cref="T:JetBrains.Application.UI.Options.OptionsPageViewFactoryManager"/> to import Solution components to the ctor (preeempts Shell when a solution is open and it's the current solution).
            </summary>
        </member>
    </members>
</doc>
